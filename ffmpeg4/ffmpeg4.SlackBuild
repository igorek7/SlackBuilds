#!/bin/sh

# Slackware build script for ffmpeg4
# SlackBuild Version: 190105 Switched to 4.1, enable OpenCL 
# SlackBuild Version: 181210 Disable FDK_AAC for now
# SlackBuild Version: 181009 Upgraded to Version 3.4 (git)
# Copyright 2019 Igor <DIO> ( igor29768 AT gmail.com )
# Copyright 2018 Andreas Guldstrand
# Copyright 2010-2015 Heinz Wiesinger, Amsterdam, The Netherlands
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Originally written by core (eroc@linuxmail.org)
# Modified by Robby Workman <rworkman@slackbuilds.org>

PRGNAM=ffmpeg4
#VERSION=${VERSION:-4.1}
VERSION=`date +%g%m%d`
BUILD=${BUILD:-8}
TAG=${TAG:-dio}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) - 1 ))}
NUMJOBS=${NUMJOBS:-" -j$NJOBS "}

# environment sanity checks
TEXI2HTML=$(which texi2html 2>/dev/null)

if [ "$TEXI2HTML" = "" ]; then
  echo "Could not find texi2html! Please make sure to have tetex or texlive installed"
  echo "and that texi2html is in PATH."
  exit 1
fi

# --enable-runtime-cpu is meant for libswscale only and
# has no influence on the other parts of ffmpeg so there's
# not really a point in bothering
PKGARCH=$(uname -m)_custom

# Configure ffmpeg features not autodetected by default
# Unfortunately ffmpeg's configure doesn't support --enable-feature=yes
# syntax, so we have to do it the complicated way :/

enable() {
  VAR="$1"; shift
  DEF="$1"; shift
  YES="$1"; shift
  NO="$1"; shift
  eval "$VAR=\${$VAR:-$DEF}"
  eval "enable_$VAR=\"$NO\""
  eval "[ \"\$$VAR\" = \"yes\" ] && enable_$VAR=\"$YES\""
}

# set "enable_$VAR" variables
       # ENV VAR      DEFAULT    IF YES                  IF NO
enable "BINS"          "no"  ""                       "--disable-programs --disable-manpages"
enable "CHROMAPRINT"   "no"  "--enable-chromaprint"   ""
enable "DECKLINK"      "no"  "--enable-decklink"      ""
enable "FREI0R"        "yes"  "--enable-frei0r"        ""
enable "GNUTLS"        "no"  "--enable-gnutls"        "--disable-gnutls"
enable "LADSPA"        "no"  "--enable-ladspa"        ""
enable "LIBAOM"        "no"  "--enable-libaom"        ""
enable "LIBBLURAY"     "no"  "--enable-libbluray"     ""
enable "LIBBS2B"       "no"  "--enable-libbs2b"       ""
enable "LIBCACA"       "yes" "--enable-libcaca"       ""
enable "LIBCDIO"       "yes" "--enable-libcdio"       ""
enable "LIBCELT"       "no"  "--enable-libcelt"       ""
enable "LIBDC1394"     "no"  "--enable-libdc1394"     ""
enable "LIBFDK_AAC"    "no"  "--enable-nonfree --enable-libfdk_aac" ""
enable "LIBFLITE"      "no"  "--enable-libflite"      ""
enable "LIBFONTCONFIG" "yes" "--enable-libfontconfig" ""
enable "LIBFREETYPE"   "yes" "--enable-libfreetype"   ""
enable "LIBFRIBIDI"    "yes" "--enable-libfribidi"    ""
enable "LIBGME"        "no"  "--enable-libgme"        ""
enable "LIBGSM"        "yes"  "--enable-libgsm"        ""
enable "LIBIEC61883"   "no"  "--enable-libiec61883"   ""
enable "LIBILBC"       "no"  "--enable-libilbc"       ""
enable "LIBMODPLUG"    "no"  "--enable-libmodplug"    ""
enable "LIBMP3LAME"    "yes"  "--enable-libmp3lame"    ""
enable "LIBOPENCORE"   "no"  "--enable-libopencore-amrnb --enable-libopencore-amrwb" ""
enable "LIBOPENCV"     "no"  "--enable-libopencv"     ""
enable "LIBOPENJPEG"   "yes" "--enable-libopenjpeg"   ""
enable "LIBOPUS"       "yes"  "--enable-libopus"       ""
enable "LIBPULSE"      "yes" "--enable-libpulse"      ""
enable "LIBRTMP"       "no"  "--enable-librtmp"       ""
enable "LIBRUBBERBAND" "no"  "--enable-librubberband" ""
enable "LIBSMBCLIENT"  "no"  "--enable-libsmbclient"  "--disable-libsmbclient"
enable "LIBSNAPPY"     "no"  "--enable-libsnappy"     ""
enable "LIBSPEEX"      "no"  "--enable-libspeex"      ""
enable "LIBSSH"        "yes" "--enable-libssh"        ""
enable "LIBTESSERACT"  "no"  "--enable-libtesseract"  ""
enable "LIBTHEORA"     "yes" "--enable-libtheora"     ""
enable "LIBTWOLAME"    "no"  "--enable-libtwolame"    ""
enable "LIBV4L2"       "yes" "--enable-libv4l2"       ""
enable "LIBVIDSTAB"    "no"  "--enable-libvidstab"    ""
enable "LIBVORBIS"     "yes" "--enable-libvorbis"     ""
enable "LIBVPX"        "yes" "--enable-libvpx"        ""
enable "LIBWAVPACK"    "yes" "--enable-libwavpack"    ""
enable "LIBWEBP"       "no"  "--enable-libwebp"       ""
enable "LIBX264"       "yes"  "--enable-libx264"       ""
enable "LIBX265"       "yes"  "--enable-libx265"       ""
enable "LIBXVID"       "no"  "--enable-libxvid"       ""
enable "LIBZMQ"        "no"  "--enable-libzmq"        ""
enable "LIBZVBI"       "no"  "--enable-libzvbi"       ""
enable "OPENAL"        "no"  "--enable-openal"        ""
enable "OPENGL"        "yes" "--enable-opengl"        ""
enable "OPENSSL"       "yes" "--enable-nonfree --enable-openssl" ""
enable "OPENCL"        "yes" "--enable-opencl"        ""

[ "$DECKLINK" = "no" ] && SLKCFLAGS="$SLKCFLAGS -I/usr/include/decklink"

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP

# <DIO> Cloning the current FFmpeg sources
if [ ! -e $PRGNAM ]; then
 git clone -b release/4.1 git://github.com/FFmpeg/FFmpeg.git $PRGNAM
 cd $PRGNAM
else   
 cd $PRGNAM
# make clean
 git pull
fi

#m -rf $PRGNAM-$VERSION
#ar xvf $CWD/$PRGNAM-$VERSION.tar.bz2
#d $PRGNAM-$VERSION

# </DIO>

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX}/ffmpeg4 \
  --shlibdir=/usr/lib${LIBDIRSUFFIX} \
  --docdir=/usr/doc/$PRGNAM-$VERSION/html \
  --mandir=/usr/man \
  --incdir=/usr/include/ffmpeg4 \
  --datadir=/usr/share/ffmpeg4 \
  --enable-rpath \
  --disable-podpages \
  --disable-txtpages \
  --arch=$ARCH \
  --enable-gpl \
  --enable-version3 \
  --disable-debug \
  --enable-shared \
  --disable-static \
  --enable-pthreads \
  --enable-postproc \
  --enable-swscale \
  --enable-avfilter \
  --enable-avresample \
  --enable-libass \
  $enable_BINS \
  $enable_CHROMAPRINT \
  $enable_DECKLINK \
  $enable_FREI0R \
  $enable_GNUTLS \
  $enable_LADSPA \
  $enable_LIBAOM \
  $enable_LIBBLURAY \
  $enable_LIBBS2B \
  $enable_LIBCACA \
  $enable_LIBCDIO \
  $enable_LIBCELT \
  $enable_LIBDC1394 \
  $enable_LIBFDK_AAC \
  $enable_LIBFLITE \
  $enable_LIBFONTCONFIG \
  $enable_LIBFREETYPE \
  $enable_LIBFRIBIDI \
  $enable_LIBGME \
  $enable_LIBGSM \
  $enable_LIBIEC61883 \
  $enable_LIBILBC \
  $enable_LIBMODPLUG \
  $enable_LIBMP3LAME \
  $enable_LIBOPENCORE \
  $enable_LIBOPENCV \
  $enable_LIBOPENJPEG \
  $enable_LIBOPUS \
  $enable_LIBPULSE \
  $enable_LIBRTMP \
  $enable_LIBRUBBERBAND \
  $enable_LIBSMBCLIENT \
  $enable_LIBSNAPPY \
  $enable_LIBSPEEX \
  $enable_LIBSSH \
  $enable_LIBTESSERACT \
  $enable_LIBTHEORA \
  $enable_LIBTWOLAME \
  $enable_LIBV4L2 \
  $enable_LIBVIDSTAB \
  $enable_LIBVORBIS \
  $enable_LIBVPX \
  $enable_LIBWAVPACK \
  $enable_LIBWEBP \
  $enable_LIBX264 \
  $enable_LIBX265 \
  $enable_LIBXVID \
  $enable_LIBZMQ \
  $enable_LIBZVBI \
  $enable_OPENAL \
  $enable_OPENGL \
  $enable_OPENCL \
  $enable_OPENSSL

make ${NUMJOBS} || make || exit 1
make install DESTDIR=$PKG

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

if [ "$BINS" = "yes" ]; then
  find $PKG/usr/man -type f -exec gzip -9 {} \;
  for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
fi

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION

# <DIO> there is no VERSION in git
cp -a Changelog COPYING* CREDITS INSTALL* LICENSE* MAINTAINERS README* RELEASE \
  $PKG/usr/doc/$PRGNAM-$VERSION
# <DIO> there are no RELEASE_NOTES in git => last 20 comments in log
#find . -name "RELEASE_NOTES" -exec cp -a {} $PKG/usr/doc/$PRGNAM-$VERSION/ \;
git log -20 > $PKG/usr/doc/$PRGNAM-$VERSION/LASTLOG20.txt
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
[ -e $CWD/slack-required ] && cat $CWD/slack-required > $PKG/install/slack-required

# doinst.sh for the New config files
cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cd ${PKG}
# Build package:
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$PKGARCH-$BUILD$TAG.${PKGTYPE:-txz}
